{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n}; // Building a 'selector'\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n      CASE;\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn('Cant remove product (id: ${action.id}) as its not in basket!');\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    case \"SET_USER\":\n      return { ...state,\n        user: action.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/entropy/Desktop/React/amazon-clone/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","CASE","index","findIndex","basketItem","id","newBasket","splice","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB,C,CAKP;;AAEA,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC1BA,MAD0B,aAC1BA,MAD0B,uBAC1BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADG;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFL,OAAP;AAKJQ,MAAAA,IAAI;;AACJ,SAAK,oBAAL;AACI,YAAMC,KAAK,GAAGN,KAAK,CAACR,MAAN,CAAae,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBR,MAAM,CAACQ,EAAhE,CAAd;AACA,UAAIC,SAAS,GAAG,CAAC,GAAGV,KAAK,CAACR,MAAV,CAAhB;;AAEA,UAAIc,KAAK,IAAI,CAAb,EAAgB;AACZI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEO;AACHJ,QAAAA,OAAO,CAACU,IAAR,CACI,8DADJ;AAGH;;AAED,aAAO,EACH,GAAGZ,KADA;AAEHR,QAAAA,MAAM,EAAEkB;AAFL,OAAP;;AAKJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHP,QAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFV,OAAP;;AAKJ;AACI,aAAOO,KAAP;AAhCR;AAkCH,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    basket: [],\n    user: null\n};\n\n// Building a 'selector'\n\nexport const getBasketTotal = (basket) =>\n    basket?.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case 'ADD_TO_BASKET':\n            return {\n                ...state,\n                basket: [...state.basket, action.item],\n            };\n\n        CASE\n        case \"REMOVE_FROM_BASKET\":\n            const index = state.basket.findIndex((basketItem) => basketItem.id === action.id);\n            let newBasket = [...state.basket];\n\n            if (index >= 0) {\n                newBasket.splice(index, 1);\n            } else {\n                console.warn(\n                    'Cant remove product (id: ${action.id}) as its not in basket!'\n                )\n            }\n\n            return {\n                ...state,\n                basket: newBasket\n            }\n\n        case \"SET_USER\":\n            return {\n                ...state,\n                user: action.user\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}